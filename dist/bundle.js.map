{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://card-game/webpack/bootstrap","webpack://card-game/webpack/runtime/define property getters","webpack://card-game/webpack/runtime/hasOwnProperty shorthand","webpack://card-game/./js/routes.js","webpack://card-game/./js/helpers.js","webpack://card-game/./js/components/game-page-component.js","webpack://card-game/./js/components/result-page-component.js","webpack://card-game/./js/script.js","webpack://card-game/./js/components/difficulty-page-component.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const DIFFICULTY_PAGE = 'difficulty';\nexport const GAME_PAGE = 'game';\nexport const RESULT_PAGE = 'result';\n","export function generateDeck(difficulty) {\n    let cardsDeck = [];\n\n    const suits = ['Diamonds', 'Hearts', 'Clubs', 'Spades'];\n    const ranks = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6'];\n\n    for (let suit of compareRandom(suits)) {\n        for (let rank of compareRandom(ranks)) {\n            cardsDeck.push({ suit, rank });\n        }\n    }\n\n    cardsDeck = compareRandom(cardsDeck)\n        .slice(0, difficulty * 3)\n        .flatMap((card) => [card, { ...card }]);\n\n    return compareRandom(cardsDeck);\n}\n\nfunction compareRandom(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n\nlet timerInterval = null;\nexport let gameTime = 0;\n\nexport function startTimer() {\n    let minutes = 0;\n    let seconds = 0;\n    const minutesElement = document.getElementById('minutes');\n    const secondsElement = document.getElementById('seconds');\n\n    timerInterval = setInterval(() => {\n        seconds++;\n        if (seconds === 60) {\n            seconds = 0;\n            minutes++;\n        }\n        gameTime = minutes * 60 + seconds;\n        minutesElement.textContent = minutes < 10 ? `0${minutes}` : minutes;\n        secondsElement.textContent = seconds < 10 ? `0${seconds}` : seconds;\n    }, 1000);\n    return gameTime;\n}\n\nexport function stopTimer() {\n    clearInterval(timerInterval);\n}\n","import { startTimer, stopTimer, gameTime } from '../helpers.js';\nimport { DIFFICULTY_PAGE, RESULT_PAGE } from '../routes.js';\nimport { game } from '../script.js';\n\nexport function renderGamePageComponent({ appEl, goToPage, playCards }) {\n    const cardsHTML = playCards\n        .map((card, index) => {\n            return `<div class=\"card visible\" data-index=\"${index}\">\n                            <div class=\"card__back\">\n                                <img src=\"./static/img/card-back.png\" alt=\"card back\">\n                            </div>\n                            <div class=\"card__front\">\n                                <div class=\"card__top-left\">\n                                    <span class=\"rank\">${card.rank}</span>\n                                    <span class=\"small-suit\">${getSuitSymbol(\n                                        card.suit\n                                    )}</span>\n                                </div>\n                                <div class=\"card__center-suit\">${getSuitSymbol(\n                                    card.suit\n                                )}\n                                </div>\n                                <div class=\"card__down-right\">\n                                    <span class=\"rank\">${card.rank}</span>\n                                    <span class=\"small-suit\">${getSuitSymbol(\n                                        card.suit\n                                    )}</span>\n                                </div> \n                            </div>  \n                        </div>`;\n        })\n        .join('');\n\n    const appHtml = `<div class=\"game\">\n    <div class=\"game__info\">\n      <div class=\"timer\">\n        <div class=\"timer__block\">\n          <span class=\"timer__label\">min</span>\n          <span id=\"minutes\">00</span>\n        </div>\n        <span class=\"timer__dot\">.</span>\n        <div class=\"timer__block\">\n          <span class=\"timer__label\">sek</span>\n          <span id=\"seconds\">00</span>\n        </div>\n      </div>\n      <button class=\"game__btn btn\">Начать заново</button>\n    </div>\n    <div class=\"cards\">${cardsHTML}</div>\n  `;\n\n    appEl.innerHTML = appHtml;\n\n    const cardElements = appEl.querySelectorAll('.card');\n    let selectedCards = [];\n    let matchedPairs = 0;\n    cardElements.forEach((cardEl) => {\n        cardEl.classList.remove('visible');\n    });\n    let completedTimeout = false;\n    setTimeout(() => {\n        cardElements.forEach((cardEl) => {\n            cardEl.classList.add('visible');\n        });\n    }, 500);\n    let showCardTime = setTimeout(() => {\n        cardElements.forEach((cardEl) => {\n            cardEl.classList.remove('visible');\n        });\n        completedTimeout = true;\n        startTimer();\n    }, 5000);\n\n    cardElements.forEach((cardEl, index) => {\n        cardEl.addEventListener('click', () => {\n            if (\n                selectedCards.length < 2 &&\n                !cardEl.classList.contains('matched') &&\n                !cardEl.classList.contains('visible')\n            ) {\n                cardEl.classList.add('visible');\n                selectedCards.push({ element: cardEl, index });\n\n                if (selectedCards.length === 2) {\n                    const card1 = playCards[selectedCards[0].index];\n                    const card2 = playCards[selectedCards[1].index];\n\n                    if (\n                        card1.rank === card2.rank &&\n                        card1.suit === card2.suit\n                    ) {\n                        selectedCards.forEach((selectedCard) => {\n                            setTimeout(() => {\n                                selectedCard.element.classList.add('matched');\n                            }, 600);\n                        });\n                        matchedPairs++;\n\n                        if (matchedPairs === playCards.length / 2) {\n                            setTimeout(() => {\n                                stopTimer();\n                                game.gameTime = gameTime;\n                                game.gameStatus = RESULT_PAGE;\n                                game.isWin = true;\n                                goToPage(RESULT_PAGE);\n                            }, 800);\n                        }\n                    } else {\n                        setTimeout(() => {\n                            stopTimer();\n                            console.log(gameTime);\n                            game.gameTime = gameTime;\n                            game.gameStatus = RESULT_PAGE;\n                            game.isWin = false;\n                            goToPage(RESULT_PAGE);\n                        }, 800);\n                    }\n\n                    selectedCards = [];\n                }\n            }\n        });\n    });\n\n    document.querySelector('.game__btn').addEventListener('click', () => {\n        if (!completedTimeout) {\n            clearTimeout(showCardTime);\n        }\n        stopTimer();\n        goToPage(DIFFICULTY_PAGE);\n    });\n}\n\nfunction getSuitSymbol(suit) {\n    const suitSymbols = {\n        Hearts: '<img src=\"./static/img/hearts.svg\" alt=\"hearts\">',\n        Diamonds: '<img src=\"./static/img/diamonds.svg\" alt=\"diamonds\">',\n        Clubs: '<img src=\"./static/img/clubs.svg\" alt=\"clubs\">',\n        Spades: '<img src=\"./static/img/spades.svg\" alt=\"spades\">',\n    };\n\n    return suitSymbols[suit];\n}\n","import { DIFFICULTY_PAGE } from '../routes.js';\nimport { game } from '../script.js';\n\nexport function renderResultPageComponent({ appEl, goToPage }) {\n    let minutes = Math.floor(game.gameTime / 60);\n    let seconds = game.gameTime % 60;\n    const appHtml = `<div class=\"main\">\n    <div class = \"box result-box scale-in-center\">\n    <img\n    src=\"./static/img/${game.isWin ? 'win-img.png' : 'loose-img.png'}\"\n    alt=\"colorfull cone\"\n    class=\"win__img\"/>\n                        <p class=\"box__title result-box__title\">${\n                            game.isWin ? 'Вы выиграли!' : 'Вы проиграли!'\n                        }</p>\n                       \n                        <p class = \"timer__title\">Затраченное время</p>\n                           \n                            <div class=\"timer result-timer\">\n                            <div class=\"timer__block\">\n                             \n                              <span id=\"minutes\">${\n                                  minutes < 10 ? '0' + minutes : minutes\n                              }</span>\n                            </div>\n                            <span class=\"timer__dot\">.</span>\n                            <div class=\"timer__block\">\n                             \n                              <span id=\"seconds\">${\n                                  seconds < 10 ? '0' + seconds : seconds\n                              }</span>\n                            </div>\n                          </div>\n                          <button type=\"submit\" class=\"btn result-btn\" id=\"start-btn\">Играть снова</button>\n                        </div>\n                    </div>\n                   \n\n                </div>`;\n\n    appEl.innerHTML = appHtml;\n\n    document.getElementById('start-btn').addEventListener('click', () => {\n        goToPage(DIFFICULTY_PAGE);\n    });\n}\n","import '../scss/style.css';\nimport { renderDifficultyPageComponent } from './components/difficulty-page-component.js';\nimport { renderGamePageComponent } from './components/game-page-component.js';\nimport { renderResultPageComponent } from './components/result-page-component.js';\nimport { DIFFICULTY_PAGE, GAME_PAGE, RESULT_PAGE } from './routes.js';\n\nlet page = null;\nconst appEl = document.getElementById('app');\n\nexport const game = {\n    gameTime: 0,\n    difficulty: null,\n    gameStatus: page,\n    cards: [],\n    selectedCards: [],\n    isWin: null,\n};\n\nexport const goToPage = (newPage) => {\n    if ([DIFFICULTY_PAGE, GAME_PAGE, RESULT_PAGE].includes(newPage)) {\n        if (newPage === DIFFICULTY_PAGE) {\n            page = DIFFICULTY_PAGE;\n            return renderApp();\n        }\n\n        if (newPage === GAME_PAGE) {\n            const playCards = game.cards;\n            return renderGamePageComponent({\n                appEl,\n                goToPage,\n                playCards,\n            });\n        }\n\n        if (newPage === RESULT_PAGE) {\n            return renderResultPageComponent({\n                appEl,\n                goToPage,\n            });\n        }\n    }\n\n    throw new Error('Страница не существует');\n};\n\nexport const renderApp = () => {\n    if (page === DIFFICULTY_PAGE) {\n        return renderDifficultyPageComponent({\n            appEl,\n            goToPage,\n        });\n    }\n\n    if (page === GAME_PAGE) {\n        const playCards = game.cards;\n        return renderGamePageComponent({\n            appEl,\n            goToPage,\n            playCards,\n        });\n    }\n\n    if (page === RESULT_PAGE) {\n        return renderResultPageComponent({\n            appEl,\n            goToPage,\n        });\n    }\n};\n\ngoToPage(DIFFICULTY_PAGE);\n","import { game } from '../script.js';\nimport { GAME_PAGE } from '../routes.js';\nimport { generateDeck } from '../helpers.js';\n\nexport function renderDifficultyPageComponent({ appEl, goToPage }) {\n    const appHtml = `<div class=\"main\">\n    <form class=\"difficulty-form\">\n                    <div class=\"box\">\n                        <p class=\"box__title\">Выбери сложность</p>\n                        <div class=\"box__container\">\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"1\" />\n                                <span class=\"box__item-text\">1</span>\n                            </label>\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"2\" />\n                                <span class=\"box__item-text\">2</span>\n                            </label>\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"3\" />\n                                <span class=\"box__item-text\">3</span>\n                            </label>\n                        </div>\n                        <button type=\"submit\" class=\"btn difficulty-btn\" id=\"start-btn\">Старт</button>\n                        <div class=\"form-error\"></div>\n                    </div>\n                </form>\n                </div>`;\n\n    appEl.innerHTML = appHtml;\n\n    //         const setError = (message) => {\n    //             appEl.querySelector(\".form-error\").textContent = message;\n    //           };\n\n    //   const difficultyBtnElements = document.querySelectorAll(\".difficulty-box__item\");\n    //   let selectedDifficultyBtn = null;\n\n    //   difficultyBtnElements.forEach((difficultyBtnEl, index) => {\n    //     difficultyBtnEl.addEventListener('click', (e) => {\n    //         setError(\"\")\n    //         if (selectedDifficultyBtn != null) {\n    //             selectedDifficultyBtn.classList.remove(\"selected\")\n    //         }\n    //         difficultyBtnEl.classList.add(\"selected\")\n    //         selectedDifficultyBtn = difficultyBtnEl;\n\n    //         game.difficulty = index + 1;\n    //         game.gameStatus = CARDS_PAGE;\n    //         game.cards = game.difficulty * 6\n\n    //         console.log(game)\n    //     })\n    //   })\n\n    //   const startBtnEl = document.getElementById(\"start-btn\")\n\n    //   startBtnEl.addEventListener(\"click\", (e) => {\n    //     if (game.difficulty == null){\n    //         setError('Выберите уровень сложности!')\n    //     } else {\n    //         goToPage(CARDS_PAGE)\n    //     }\n    //   })\n\n    const difficultyFormEl = appEl.querySelector('.difficulty-form');\n    const formErrorEl = appEl.querySelector('.form-error');\n\n    const difficultyBtnElements = document.querySelectorAll('.box__item');\n    let prevSelectedBtn = null;\n\n    difficultyBtnElements.forEach((difficultyBtnEl) => {\n        difficultyBtnEl.addEventListener('click', () => {\n            setError('');\n            if (prevSelectedBtn !== null) {\n                prevSelectedBtn.classList.remove('selected');\n            }\n            difficultyBtnEl.classList.add('selected');\n            prevSelectedBtn = difficultyBtnEl;\n        });\n    });\n\n    difficultyFormEl.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const selectedDifficultyBtn = difficultyFormEl.querySelector(\n            \"input[name='difficulty']:checked\"\n        );\n\n        if (!selectedDifficultyBtn) {\n            setError('Выберите уровень сложности!');\n            return;\n        }\n\n        const selectedDifficulty = parseInt(selectedDifficultyBtn.value);\n        game.difficulty = selectedDifficulty;\n        game.gameStatus = GAME_PAGE;\n        game.cards = generateDeck(selectedDifficulty);\n        goToPage(GAME_PAGE);\n    });\n\n    function setError(message) {\n        formErrorEl.textContent = message;\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","DIFFICULTY_PAGE","GAME_PAGE","RESULT_PAGE","compareRandom","arr","i","length","j","Math","floor","random","timerInterval","gameTime","stopTimer","clearInterval","renderGamePageComponent","appEl","goToPage","playCards","appHtml","map","card","index","rank","getSuitSymbol","suit","join","innerHTML","cardElements","querySelectorAll","selectedCards","matchedPairs","forEach","cardEl","classList","remove","completedTimeout","setTimeout","add","showCardTime","minutes","seconds","minutesElement","document","getElementById","secondsElement","setInterval","textContent","startTimer","addEventListener","contains","push","element","card1","card2","selectedCard","game","gameStatus","isWin","console","log","querySelector","clearTimeout","Hearts","Diamonds","Clubs","Spades","renderResultPageComponent","page","difficulty","cards","newPage","includes","renderApp","Error","difficultyFormEl","formErrorEl","difficultyBtnElements","prevSelectedBtn","setError","message","difficultyBtnEl","e","preventDefault","selectedDifficultyBtn","selectedDifficulty","parseInt","value","cardsDeck","suits","ranks","slice","flatMap","generateDeck","renderDifficultyPageComponent"],"sourceRoot":""}