{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://card-game/webpack/bootstrap","webpack://card-game/webpack/runtime/define property getters","webpack://card-game/webpack/runtime/hasOwnProperty shorthand","webpack://card-game/./js/routes.ts","webpack://card-game/./js/helpers.ts","webpack://card-game/./js/components/game-page-component.ts","webpack://card-game/./js/components/result-page-component.ts","webpack://card-game/./js/script.ts","webpack://card-game/./js/components/difficulty-page-component.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const DIFFICULTY_PAGE = 'difficulty';\nexport const GAME_PAGE = 'game';\nexport const RESULT_PAGE = 'result';\n","export interface Card {\n    suit: string;\n    rank: string;\n}\n\n// export function generateDeck(difficulty: number): Card[] {\n//     let cardsDeck: Card[] = [];\n\n//     const suits = ['Diamonds', 'Hearts', 'Clubs', 'Spades'];\n//     const ranks = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6'];\n\n//     for (let suit of compareRandom(suits)) {\n//         for (let rank of compareRandom(ranks)) {\n//             if (typeof suit === 'string' && typeof rank === 'string') {\n//                 cardsDeck.push({ suit, rank });\n//             }\n//         }\n//     }\n\n//     cardsDeck = compareRandom(cardsDeck)\n//         .slice(0, difficulty * 3)\n//         .filter((card: Card | string | object): card is Card => {\n//             if (typeof card === 'string') {\n//                 return false;\n//             }\n//             if (typeof card === 'object' && 'suit' in card && 'rank' in card) {\n//                 return true;\n//             }\n//             return false;\n//         })\n//         .map((card: Card | object) => {\n//             if (typeof card === 'object') {\n//                 return card as Card;\n//             }\n//             return { suit: '', rank: '' };\n//         });\n\n//     return compareRandom(cardsDeck);\n// }\n\n// function compareRandom(arr: Array<string | object>): Array<string | object> {\n//     for (let i = arr.length - 1; i > 0; i--) {\n//         const j = Math.floor(Math.random() * (i + 1));\n//         [arr[i], arr[j]] = [arr[j], arr[i]];\n//     }\n//     return arr;\n// }\n\n// let timerInterval: number;\n// export let gameTime: number = 0;\n\n// export function startTimer() {\n//     let minutes = 0;\n//     let seconds = 0;\n//     const minutesElement = document.getElementById('minutes');\n//     const secondsElement = document.getElementById('seconds');\n\n//     timerInterval = window.setInterval(() => {\n//         seconds++;\n//         if (seconds === 60) {\n//             seconds = 0;\n//             minutes++;\n//         }\n//         gameTime = minutes * 60 + seconds;\n//         if (minutesElement !== null) {\n//             minutesElement.textContent = (minutes < 10 ? '0' : '').toString();\n//         }\n\n//         if (secondsElement !== null) {\n//             secondsElement.textContent = (\n//                 seconds < 10 ? `0${seconds}` : seconds\n//             ).toString();\n//         }\n//     }, 1000);\n//     return gameTime;\n// }\n\n// export function stopTimer() {\n//     clearInterval(timerInterval);\n// }\n\nexport function generateDeck(difficulty: number): Card[] {\n    let cardsDeck: Card[] = [];\n\n    const suits = ['Diamonds', 'Hearts', 'Clubs', 'Spades'];\n    const ranks = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6'];\n\n    for (let suit of compareRandom(suits)) {\n        for (let rank of compareRandom(ranks)) {\n            if (typeof suit === 'string' && typeof rank === 'string') {\n                cardsDeck.push({ suit, rank });\n            }\n        }\n    }\n    cardsDeck = compareRandom(cardsDeck)\n        .slice(0, difficulty * 3)\n        .flatMap((card: Card) => [card, { ...card }] as const);\n    // cardsDeck = compareRandom(cardsDeck)\n    //     .slice(0, difficulty * 3)\n    //     .filter((card): card is Card => {\n    //         return typeof card === 'object' && 'suit' in card && 'rank' in card;\n    //     })\n    //     .map((card) => {\n    //         return typeof card === 'object' ? card : { suit: '', rank: '' };\n    //     });\n\n    return compareRandom(cardsDeck) as Card[];\n}\n\nfunction compareRandom<T>(arr: T[]): T[] {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n\nlet timerInterval: number;\nexport let gameTime: number = 0;\n\nexport function startTimer() {\n    let minutes = 0;\n    let seconds = 0;\n    const minutesElement = document.getElementById('minutes');\n    const secondsElement = document.getElementById('seconds');\n\n    timerInterval = window.setInterval(() => {\n        seconds++;\n        if (seconds === 60) {\n            seconds = 0;\n            minutes++;\n        }\n        gameTime = minutes * 60 + seconds;\n        if (minutesElement !== null) {\n            minutesElement.textContent =\n                (minutes < 10 ? '0' : '') + minutes.toString();\n        }\n\n        if (secondsElement !== null) {\n            secondsElement.textContent =\n                (seconds < 10 ? '0' : '') + seconds.toString();\n        }\n    }, 1000);\n    return gameTime;\n}\n\nexport function stopTimer() {\n    clearInterval(timerInterval);\n}\n","import { startTimer, stopTimer, gameTime, Card } from '../helpers';\nimport { DIFFICULTY_PAGE, RESULT_PAGE } from '../routes';\nimport { game } from '../script';\ninterface SelectedCard {\n    element: Element;\n    index: number;\n}\n\nexport function renderGamePageComponent({\n    appEl,\n    goToPage,\n    playCards,\n}: {\n    appEl: HTMLElement;\n    goToPage: (page: string) => void;\n    playCards: Card[];\n}) {\n    const cardsHTML = playCards\n        .map((card, index) => {\n            return `<div class=\"card visible\" data-index=\"${index}\">\n                            <div class=\"card__back\">\n                                <img src=\"./static/img/card-back.png\" alt=\"card back\">\n                            </div>\n                            <div class=\"card__front\">\n                                <div class=\"card__top-left\">\n                                    <span class=\"rank\">${card.rank}</span>\n                                    <span class=\"small-suit\">${getSuitSymbol(\n                                        card.suit\n                                    )}</span>\n                                </div>\n                                <div class=\"card__center-suit\">${getSuitSymbol(\n                                    card.suit\n                                )}\n                                </div>\n                                <div class=\"card__down-right\">\n                                    <span class=\"rank\">${card.rank}</span>\n                                    <span class=\"small-suit\">${getSuitSymbol(\n                                        card.suit\n                                    )}</span>\n                                </div> \n                            </div>  \n                        </div>`;\n        })\n        .join('');\n\n    const appHtml = `<div class=\"game\">\n    <div class=\"game__info\">\n      <div class=\"timer\">\n        <div class=\"timer__block\">\n          <span class=\"timer__label\">min</span>\n          <span id=\"minutes\">00</span>\n        </div>\n        <span class=\"timer__dot\">.</span>\n        <div class=\"timer__block\">\n          <span class=\"timer__label\">sek</span>\n          <span id=\"seconds\">00</span>\n        </div>\n      </div>\n      <button class=\"game__btn btn\">Начать заново</button>\n    </div>\n    <div class=\"cards\">${cardsHTML}</div>\n  `;\n\n    appEl.innerHTML = appHtml;\n\n    const cardElements = appEl.querySelectorAll('.card');\n    let selectedCards: SelectedCard[] = [];\n    let matchedPairs = 0;\n    cardElements.forEach((cardEl) => {\n        cardEl.classList.remove('visible');\n    });\n    let completedTimeout = false;\n    setTimeout(() => {\n        cardElements.forEach((cardEl) => {\n            cardEl.classList.add('visible');\n        });\n    }, 500);\n    let showCardTime = setTimeout(() => {\n        cardElements.forEach((cardEl) => {\n            cardEl.classList.remove('visible');\n        });\n        completedTimeout = true;\n        startTimer();\n    }, 5000);\n\n    cardElements.forEach((cardEl, index) => {\n        cardEl.addEventListener('click', () => {\n            if (\n                selectedCards.length < 2 &&\n                !cardEl.classList.contains('matched') &&\n                !cardEl.classList.contains('visible')\n            ) {\n                cardEl.classList.add('visible');\n                selectedCards.push({ element: cardEl, index });\n\n                if (selectedCards.length === 2) {\n                    const card1 = playCards[selectedCards[0].index];\n                    const card2 = playCards[selectedCards[1].index];\n\n                    if (\n                        card1.rank === card2.rank &&\n                        card1.suit === card2.suit\n                    ) {\n                        selectedCards.forEach((selectedCard) => {\n                            setTimeout(() => {\n                                selectedCard.element.classList.add('matched');\n                            }, 600);\n                        });\n                        matchedPairs++;\n\n                        if (matchedPairs === playCards.length / 2) {\n                            setTimeout(() => {\n                                stopTimer();\n                                game.gameTime = gameTime;\n                                game.gameStatus = RESULT_PAGE;\n                                game.isWin = true;\n                                goToPage(RESULT_PAGE);\n                            }, 800);\n                        }\n                    } else {\n                        setTimeout(() => {\n                            stopTimer();\n                            console.log(gameTime);\n                            game.gameTime = gameTime;\n                            game.gameStatus = RESULT_PAGE;\n                            game.isWin = false;\n                            goToPage(RESULT_PAGE);\n                        }, 800);\n                    }\n\n                    selectedCards = [];\n                }\n            }\n        });\n    });\n\n    const gameBtn = document.querySelector('.game__btn');\n    if (gameBtn !== null) {\n        gameBtn.addEventListener('click', () => {\n            if (!completedTimeout) {\n                clearTimeout(showCardTime);\n            }\n            stopTimer();\n            goToPage(DIFFICULTY_PAGE);\n        });\n    }\n}\n\nconst suitSymbols: {\n    [key: string]: string;\n} = {\n    Hearts: '<img src=\"./static/img/hearts.svg\" alt=\"hearts\">',\n    Diamonds: '<img src=\"./static/img/diamonds.svg\" alt=\"diamonds\">',\n    Clubs: '<img src=\"./static/img/clubs.svg\" alt=\"clubs\">',\n    Spades: '<img src=\"./static/img/spades.svg\" alt=\"spades\">',\n};\n\nfunction getSuitSymbol(suit: string) {\n    return suitSymbols[suit];\n}\n","import { DIFFICULTY_PAGE } from '../routes';\nimport { game } from '../script';\n\nexport function renderResultPageComponent({\n    appEl,\n    goToPage,\n}: {\n    appEl: HTMLElement;\n    goToPage: (page: string) => void;\n}) {\n    let minutes = Math.floor(game.gameTime / 60);\n    let seconds = game.gameTime % 60;\n    const appHtml = `<div class=\"main\">\n    <div class = \"box result-box scale-in-center\">\n    <img\n    src=\"./static/img/${game.isWin ? 'win-img.png' : 'loose-img.png'}\"\n    alt=\"colorfull cone\"\n    class=\"win__img\"/>\n                        <p class=\"box__title result-box__title\">${\n                            game.isWin ? 'Вы выиграли!' : 'Вы проиграли!'\n                        }</p>\n                       \n                        <p class = \"timer__title\">Затраченное время</p>\n                           \n                            <div class=\"timer result-timer\">\n                            <div class=\"timer__block\">\n                             \n                              <span id=\"minutes\">${\n                                  minutes < 10 ? '0' + minutes : minutes\n                              }</span>\n                            </div>\n                            <span class=\"timer__dot\">.</span>\n                            <div class=\"timer__block\">\n                             \n                              <span id=\"seconds\">${\n                                  seconds < 10 ? '0' + seconds : seconds\n                              }</span>\n                            </div>\n                          </div>\n                          <button type=\"submit\" class=\"btn result-btn\" id=\"start-btn\">Играть снова</button>\n                        </div>\n                    </div>\n                   \n\n                </div>`;\n\n    appEl.innerHTML = appHtml;\n\n    const startBtn = appEl.querySelector('#start-btn');\n    if (startBtn) {\n        startBtn.addEventListener('click', () => {\n            goToPage(DIFFICULTY_PAGE);\n        });\n    }\n}\n","import '../scss/style.css';\nimport { renderDifficultyPageComponent } from './components/difficulty-page-component';\nimport { renderGamePageComponent } from './components/game-page-component';\nimport { renderResultPageComponent } from './components/result-page-component';\nimport { DIFFICULTY_PAGE, GAME_PAGE, RESULT_PAGE } from './routes';\nimport { Card } from '../js/helpers';\nlet page: string = '';\nconst appEl: HTMLElement | null = document.getElementById('app');\n\ninterface Game {\n    gameTime: number;\n    difficulty: number | null;\n    gameStatus: string;\n    cards: Card[];\n    selectedCards: { element: HTMLElement; index: number }[];\n    isWin: boolean | null;\n}\n\nexport const game: Game = {\n    gameTime: 0,\n    difficulty: null,\n    gameStatus: page,\n    cards: [],\n    selectedCards: [],\n    isWin: null,\n};\n\nexport const goToPage = (newPage: string) => {\n    if ([DIFFICULTY_PAGE, GAME_PAGE, RESULT_PAGE].includes(newPage)) {\n        if (newPage === DIFFICULTY_PAGE) {\n            page = DIFFICULTY_PAGE;\n            return renderApp();\n        }\n\n        if (newPage === GAME_PAGE) {\n            const playCards = game.cards;\n            return renderGamePageComponent({\n                appEl: appEl!,\n                goToPage,\n                playCards,\n            });\n        }\n\n        if (newPage === RESULT_PAGE) {\n            return renderResultPageComponent({\n                appEl: appEl!,\n                goToPage,\n            });\n        }\n    }\n\n    throw new Error('Страница не существует');\n};\n\nexport const renderApp = () => {\n    if (page === DIFFICULTY_PAGE) {\n        return renderDifficultyPageComponent({\n            appEl: appEl!,\n            goToPage,\n        });\n    }\n\n    if (page === GAME_PAGE) {\n        const playCards = game.cards;\n        return renderGamePageComponent({\n            appEl: appEl!,\n            goToPage,\n            playCards,\n        });\n    }\n\n    if (page === RESULT_PAGE) {\n        return renderResultPageComponent({\n            appEl: appEl!,\n            goToPage,\n        });\n    }\n};\n\ngoToPage(DIFFICULTY_PAGE);\n","import { game } from '../script';\nimport { GAME_PAGE } from '../routes';\nimport { generateDeck } from '../helpers';\n\nexport function renderDifficultyPageComponent({\n    appEl,\n    goToPage,\n}: {\n    appEl: HTMLElement;\n    goToPage: (page: string) => void;\n}) {\n    const appHtml = `<div class=\"main\">\n    <form class=\"difficulty-form\">\n                    <div class=\"box\">\n                        <p class=\"box__title\">Выбери сложность</p>\n                        <div class=\"box__container\">\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"1\" />\n                                <span class=\"box__item-text\">1</span>\n                            </label>\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"2\" />\n                                <span class=\"box__item-text\">2</span>\n                            </label>\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"3\" />\n                                <span class=\"box__item-text\">3</span>\n                            </label>\n                        </div>\n                        <button type=\"submit\" class=\"btn difficulty-btn\" id=\"start-btn\">Старт</button>\n                        <div class=\"form-error\"></div>\n                    </div>\n                </form>\n                </div>`;\n\n    appEl.innerHTML = appHtml;\n\n    const setError = (message: string) => {\n        const formErrorEl = appEl.querySelector('.form-error') as HTMLElement;\n        if (formErrorEl !== null) {\n            formErrorEl.textContent = message;\n        }\n    };\n    const difficultyFormEl = appEl.querySelector(\n        '.difficulty-form'\n    ) as HTMLFormElement;\n    const formErrorEl = appEl.querySelector('.form-error');\n\n    const difficultyBtnElements = document.querySelectorAll('.box__item');\n    let prevSelectedBtn: Element | null = null;\n\n    difficultyBtnElements.forEach((difficultyBtnEl) => {\n        difficultyBtnEl.addEventListener('click', () => {\n            setError('');\n            if (prevSelectedBtn !== null) {\n                prevSelectedBtn.classList.remove('selected');\n            }\n            difficultyBtnEl.classList.add('selected');\n            prevSelectedBtn = difficultyBtnEl;\n        });\n    });\n\n    if (difficultyFormEl !== null) {\n        difficultyFormEl.addEventListener('submit', (e) => {\n            e.preventDefault();\n            const selectedDifficultyBtn =\n                difficultyFormEl.querySelector<HTMLInputElement>(\n                    \"input[name='difficulty']:checked\"\n                );\n\n            if (!selectedDifficultyBtn) {\n                setError('Выберите уровень сложности!');\n                return;\n            }\n\n            const selectedDifficulty = parseInt(\n                selectedDifficultyBtn.value,\n                10\n            );\n            game.difficulty = selectedDifficulty;\n            game.gameStatus = GAME_PAGE;\n            game.cards = generateDeck(selectedDifficulty);\n            goToPage(GAME_PAGE);\n        });\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","timerInterval","DIFFICULTY_PAGE","GAME_PAGE","RESULT_PAGE","compareRandom","arr","i","length","j","Math","floor","random","gameTime","stopTimer","clearInterval","renderGamePageComponent","appEl","goToPage","playCards","cardsHTML","map","card","index","rank","getSuitSymbol","suit","join","appHtml","innerHTML","cardElements","querySelectorAll","selectedCards","matchedPairs","forEach","cardEl","classList","remove","completedTimeout","setTimeout","add","showCardTime","minutes","seconds","minutesElement","secondsElement","document","getElementById","window","setInterval","textContent","toString","addEventListener","contains","push","element","card1","card2","selectedCard","game","gameStatus","isWin","console","log","gameBtn","querySelector","clearTimeout","suitSymbols","Hearts","Diamonds","Clubs","Spades","renderResultPageComponent","startBtn","page","difficulty","cards","newPage","includes","renderApp","Error","setError","message","formErrorEl","difficultyFormEl","difficultyBtnElements","prevSelectedBtn","difficultyBtnEl","e","preventDefault","selectedDifficultyBtn","selectedDifficulty","parseInt","value","cardsDeck","ranks","slice","flatMap","generateDeck","renderDifficultyPageComponent"],"sourceRoot":""}