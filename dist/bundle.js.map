{"version":3,"file":"bundle.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,kBCA3E,MAAMI,EAAkB,aAClBC,EAAY,OACZC,EAAc,SCiB3B,SAASC,EAAcC,GACnB,IAAK,IAAIC,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAIC,GAAID,EAAIG,IAAM,CAACH,EAAIG,GAAIH,EAAIC,GACpC,CACA,OAAOD,CACX,CCmGA,SAASO,EAAcC,GAQnB,MAPoB,CAChBC,OAAQ,mDACRC,SAAU,uDACVC,MAAO,iDACPC,OAAQ,oDAGOJ,EACvB,CC/HA,IAAIK,EAAO,KAEJ,MAAMC,EAAO,CAChBC,SAAU,EACVC,WAAY,KACZC,WAAYJ,EACZK,MAAO,GACPC,cAAe,GACfC,MAAO,MAGLC,EAAYC,IACd,GAAI,CAAC1B,EAAiBC,EAAWC,GAAayB,SAASD,GACnD,OAAIA,IAAY1B,GACZiB,EAAOjB,EACA4B,MAGPF,IAAYzB,GACZ2B,IAGAF,IAAYxB,GACZ0B,IAGJX,EAAOS,OACPE,KAGJ,MAAM,IAAIC,MAAM,yBAAyB,EAGhCD,EAAY,KACrB,MAAME,EAAQC,SAASC,eAAe,OACtC,GAAIf,IAASjB,EACT,OCtCD,UAAuC,MAAE8B,EAAK,SAAEL,IAyBnDK,EAAMG,UAxBU,+sCA4DhB,MAAMC,EAAmBJ,EAAMK,cAAc,oBACvCC,EAAcN,EAAMK,cAAc,eAElCE,EAAwBN,SAASO,iBAAiB,cACxD,IAAIC,EAAkB,KA+BtB,SAASC,EAASC,GACdL,EAAYM,YAAcD,CAC9B,CA/BAJ,EAAsBM,SAASC,IAC3BA,EAAgBC,iBAAiB,SAAS,KACtCL,EAAS,IACe,OAApBD,GACAA,EAAgBO,UAAUC,OAAO,YAErCH,EAAgBE,UAAUE,IAAI,YAC9BT,EAAkBK,CAAe,GACnC,IAGNV,EAAiBW,iBAAiB,UAAWI,IACzCA,EAAEC,iBACF,MAAMC,EAAwBjB,EAAiBC,cAC3C,oCAGJ,IAAKgB,EAED,YADAX,EAAS,+BAIb,MAAMY,EAAqBC,SAASF,EAAsBG,OAC1DpC,EAAKE,WAAagC,EAClBlC,EAAKG,WAAapB,EAClBiB,EAAKI,MHhGN,SAAsBF,GACzB,IAAImC,EAAY,GAEhB,MAAMC,EAAQ,CAAC,WAAY,SAAU,QAAS,UACxCC,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAExD,IAAK,IAAI7C,KAAQT,EAAcqD,GAC3B,IAAK,IAAIE,KAAQvD,EAAcsD,GAC3BF,EAAUI,KAAK,CAAE/C,OAAM8C,SAQ/B,OAJAH,EAAYpD,EAAcoD,GACrBK,MAAM,EAAgB,EAAbxC,GACTyC,SAASC,GAAS,CAACA,EAAM,IAAKA,MAE5B3D,EAAcoD,EACzB,CG+EqBQ,CAAaX,GAC1B3B,EAASxB,EAAU,GAM3B,CD7De+D,CAA8B,CACjClC,QACAL,aAIR,GAAIR,IAAShB,EAAW,CACpB,MAAMgE,EAAY/C,EAAKI,MACvB,OD/CD,UAAiC,MAAEQ,EAAK,SAAEL,EAAQ,UAAEwC,IACvD,MA6BMC,EAAU,kgBA7BED,EACbE,KAAI,CAACL,EAAMM,KACRC,QAAQC,IAAIR,GACL,yCAAyCM,sWAMHN,EAAKJ,6EACC/C,EACvBmD,EAAKlD,wHAGoBD,EAC7BmD,EAAKlD,yKAIgBkD,EAAKJ,6EACC/C,EACvBmD,EAAKlD,iIAMpC2D,KAAK,gBAoBVzC,EAAMG,UAAYiC,EAElB,MAAMM,EAAe1C,EAAMQ,iBAAiB,SAC5C,IAAIf,EAAgB,GAChBkD,EAAe,EACnBD,EAAa7B,SAAS+B,IAClBA,EAAO5B,UAAUC,OAAO,UAAU,IAEtC4B,YAAW,KACPH,EAAa7B,SAAS+B,IAClBA,EAAO5B,UAAUE,IAAI,UAAU,GACjC,GACH,KACH2B,YAAW,KACPH,EAAa7B,SAAS+B,IAClBA,EAAO5B,UAAUC,OAAO,UAAU,GACpC,GACH,KAEHyB,EAAa7B,SAAQ,CAAC+B,EAAQN,KAC1BM,EAAO7B,iBAAiB,SAAS,KAC7B,GACItB,EAAcjB,OAAS,IACtBoE,EAAO5B,UAAU8B,SAAS,aAC1BF,EAAO5B,UAAU8B,SAAS,aAE3BF,EAAO5B,UAAUE,IAAI,WACrBzB,EAAcoC,KAAK,CAAEkB,QAASH,EAAQN,UAET,IAAzB7C,EAAcjB,QAAc,CAC5B,MAAMwE,EAAQb,EAAU1C,EAAc,GAAG6C,OACnCW,EAAQd,EAAU1C,EAAc,GAAG6C,OAGrCU,EAAMpB,OAASqB,EAAMrB,MACrBoB,EAAMlE,OAASmE,EAAMnE,MAErBW,EAAcoB,SAASqC,IACnBL,YAAW,KACPK,EAAaH,QAAQ/B,UAAUE,IAAI,UAAU,GAC9C,IAAI,IAEXyB,IAEIA,IAAiBR,EAAU3D,OAAS,GACpCqE,YAAW,KAEPzD,EAAKG,WAAanB,EAClBgB,EAAKM,OAAQ,EACbC,EAASvB,EAAY,GACtB,MAGPyE,YAAW,KAEPzD,EAAKG,WAAanB,EAClBgB,EAAKM,OAAQ,EACbC,EAASvB,EAAY,GACtB,KAGPqB,EAAgB,EACpB,CACJ,GACF,IAGNQ,SAASI,cAAc,cAAcU,iBAAiB,SAAS,KAC3DwB,QAAQC,IAAI,SACZ7C,EAASzB,EAAgB,GAEjC,CCxEeiF,CAAwB,CAC3BnD,QACAL,WACAwC,aAER,CAEA,OAAIhD,IAASf,EEpDV,UAAmC,MAAE4B,EAAK,SAAEL,IAC/C4C,QAAQC,IAAIpD,GACZ,MAAMgD,EAAU,gNAOQhD,EAAKM,MAAQ,eAAiB,m3BAuBtDM,EAAMG,UAAYiC,EAElBnC,SAASC,eAAe,aAAaa,iBAAiB,SAAS,KAC3DpB,EAASzB,EAAgB,GA2CjC,CFzBekF,CAA0B,CAC7BpD,QACAL,kBAHR,CAUA,EAGJA,EAASzB,E","sources":["webpack://card-game/webpack/bootstrap","webpack://card-game/webpack/runtime/define property getters","webpack://card-game/webpack/runtime/hasOwnProperty shorthand","webpack://card-game/./js/routes.js","webpack://card-game/./js/helpers.js","webpack://card-game/./js/components/game-page-component.js","webpack://card-game/./js/script.js","webpack://card-game/./js/components/difficulty-page-component.js","webpack://card-game/./js/components/result-page-component.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const DIFFICULTY_PAGE = 'difficulty';\nexport const GAME_PAGE = 'game';\nexport const RESULT_PAGE = 'result';\n","export function generateDeck(difficulty) {\n    let cardsDeck = [];\n\n    const suits = ['Diamonds', 'Hearts', 'Clubs', 'Spades'];\n    const ranks = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6'];\n\n    for (let suit of compareRandom(suits)) {\n        for (let rank of compareRandom(ranks)) {\n            cardsDeck.push({ suit, rank });\n        }\n    }\n\n    cardsDeck = compareRandom(cardsDeck)\n        .slice(0, difficulty * 3)\n        .flatMap((card) => [card, { ...card }]);\n\n    return compareRandom(cardsDeck);\n}\n\nfunction compareRandom(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n","import { DIFFICULTY_PAGE, RESULT_PAGE } from '../routes.js';\nimport { game } from '../script.js';\n\nexport function renderGamePageComponent({ appEl, goToPage, playCards }) {\n    const cardsHTML = playCards\n        .map((card, index) => {\n            console.log(card);\n            return `<div class=\"card visible\" data-index=\"${index}\">\n                            <div class=\"card__back\">\n                                <img src=\"./static/img/card-back.png\" alt=\"card back\">\n                            </div>\n                            <div class=\"card__front\">\n                                <div class=\"card__top-left\">\n                                    <span class=\"rank\">${card.rank}</span>\n                                    <span class=\"small-suit\">${getSuitSymbol(\n                                        card.suit\n                                    )}</span>\n                                </div>\n                                <div class=\"card__center-suit\">${getSuitSymbol(\n                                    card.suit\n                                )}\n                                </div>\n                                <div class=\"card__down-right\">\n                                    <span class=\"rank\">${card.rank}</span>\n                                    <span class=\"small-suit\">${getSuitSymbol(\n                                        card.suit\n                                    )}</span>\n                                </div> \n                            </div>  \n                        </div>`;\n        })\n        .join('');\n\n    const appHtml = `<div class=\"game\">\n    <div class=\"game__info\">\n      <div class=\"timer\">\n        <div class=\"timer__block\">\n          <span class=\"timer__label\">min</span>\n          <span id=\"minutes\">00</span>\n        </div>\n        <span class=\"timer__dot\">.</span>\n        <div class=\"timer__block\">\n          <span class=\"timer__label\">sek</span>\n          <span id=\"seconds\">00</span>\n        </div>\n      </div>\n      <button class=\"game__btn btn\">Начать заново</button>\n    </div>\n    <div class=\"cards\">${cardsHTML}</div>\n  `;\n\n    appEl.innerHTML = appHtml;\n\n    const cardElements = appEl.querySelectorAll('.card');\n    let selectedCards = [];\n    let matchedPairs = 0;\n    cardElements.forEach((cardEl) => {\n        cardEl.classList.remove('visible');\n    });\n    setTimeout(() => {\n        cardElements.forEach((cardEl) => {\n            cardEl.classList.add('visible');\n        });\n    }, 500);\n    setTimeout(() => {\n        cardElements.forEach((cardEl) => {\n            cardEl.classList.remove('visible');\n        });\n    }, 5000);\n\n    cardElements.forEach((cardEl, index) => {\n        cardEl.addEventListener('click', () => {\n            if (\n                selectedCards.length < 2 &&\n                !cardEl.classList.contains('matched') &&\n                !cardEl.classList.contains('visible')\n            ) {\n                cardEl.classList.add('visible');\n                selectedCards.push({ element: cardEl, index });\n\n                if (selectedCards.length === 2) {\n                    const card1 = playCards[selectedCards[0].index];\n                    const card2 = playCards[selectedCards[1].index];\n\n                    if (\n                        card1.rank === card2.rank &&\n                        card1.suit === card2.suit\n                    ) {\n                        selectedCards.forEach((selectedCard) => {\n                            setTimeout(() => {\n                                selectedCard.element.classList.add('matched');\n                            }, 600);\n                        });\n                        matchedPairs++;\n\n                        if (matchedPairs === playCards.length / 2) {\n                            setTimeout(() => {\n                                // alert('Вы победили!');\n                                game.gameStatus = RESULT_PAGE;\n                                game.isWin = true;\n                                goToPage(RESULT_PAGE);\n                            }, 800);\n                        }\n                    } else {\n                        setTimeout(() => {\n                            // alert('Вы проиграли!');\n                            game.gameStatus = RESULT_PAGE;\n                            game.isWin = false;\n                            goToPage(RESULT_PAGE);\n                        }, 800);\n                    }\n\n                    selectedCards = [];\n                }\n            }\n        });\n    });\n\n    document.querySelector('.game__btn').addEventListener('click', () => {\n        console.log('start');\n        goToPage(DIFFICULTY_PAGE);\n    });\n}\n\nfunction getSuitSymbol(suit) {\n    const suitSymbols = {\n        Hearts: '<img src=\"./static/img/hearts.svg\" alt=\"hearts\">',\n        Diamonds: '<img src=\"./static/img/diamonds.svg\" alt=\"diamonds\">',\n        Clubs: '<img src=\"./static/img/clubs.svg\" alt=\"clubs\">',\n        Spades: '<img src=\"./static/img/spades.svg\" alt=\"spades\">',\n    };\n\n    return suitSymbols[suit];\n}\n","import '../scss/style.css';\nimport { renderDifficultyPageComponent } from './components/difficulty-page-component.js';\nimport { renderGamePageComponent } from './components/game-page-component.js';\nimport { renderResultPageComponent } from './components/result-page-component.js';\nimport { DIFFICULTY_PAGE, GAME_PAGE, RESULT_PAGE } from './routes.js';\n\nlet page = null;\n\nexport const game = {\n    gameTime: 0,\n    difficulty: null,\n    gameStatus: page,\n    cards: [],\n    selectedCards: [],\n    isWin: null,\n};\n\nconst goToPage = (newPage) => {\n    if ([DIFFICULTY_PAGE, GAME_PAGE, RESULT_PAGE].includes(newPage)) {\n        if (newPage === DIFFICULTY_PAGE) {\n            page = DIFFICULTY_PAGE;\n            return renderApp();\n        }\n\n        if (newPage === GAME_PAGE) {\n            renderApp();\n        }\n\n        if (newPage === RESULT_PAGE) {\n            renderApp();\n        }\n\n        page = newPage;\n        renderApp();\n        return;\n    }\n    throw new Error('страницы не существует');\n};\n\nexport const renderApp = () => {\n    const appEl = document.getElementById('app');\n    if (page === DIFFICULTY_PAGE) {\n        return renderDifficultyPageComponent({\n            appEl,\n            goToPage,\n        });\n    }\n\n    if (page === GAME_PAGE) {\n        const playCards = game.cards;\n        return renderGamePageComponent({\n            appEl,\n            goToPage,\n            playCards,\n        });\n    }\n\n    if (page === RESULT_PAGE) {\n        return renderResultPageComponent({\n            appEl,\n            goToPage,\n            //     // onAddPostClick({ description, imageUrl }) {\n            //     //   // TODO: реализовать добавление поста в API\n            //     //   // addPost({token: getToken(), description, imageUrl})\n            //     //   console.log(\"Добавляю пост...\", { description, imageUrl });\n            //     //   goToPage(POSTS_PAGE);\n        });\n    }\n};\n\ngoToPage(DIFFICULTY_PAGE);\n","import { game } from '../script.js';\nimport { GAME_PAGE } from '../routes.js';\nimport { generateDeck } from '../helpers.js';\n\nexport function renderDifficultyPageComponent({ appEl, goToPage }) {\n    const appHtml = `<div class=\"main\">\n    <form class=\"difficulty-form\">\n                    <div class=\"box\">\n                        <p class=\"box__title\">Выбери сложность</p>\n                        <div class=\"box__container\">\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"1\" />\n                                <span class=\"box__item-text\">1</span>\n                            </label>\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"2\" />\n                                <span class=\"box__item-text\">2</span>\n                            </label>\n                            <label class=\"box__item\">\n                                <input type=\"radio\" name=\"difficulty\" value=\"3\" />\n                                <span class=\"box__item-text\">3</span>\n                            </label>\n                        </div>\n                        <button type=\"submit\" class=\"btn difficulty-btn\" id=\"start-btn\">Старт</button>\n                        <div class=\"form-error\"></div>\n                    </div>\n                </form>\n                </div>`;\n\n    appEl.innerHTML = appHtml;\n\n    //         const setError = (message) => {\n    //             appEl.querySelector(\".form-error\").textContent = message;\n    //           };\n\n    //   const difficultyBtnElements = document.querySelectorAll(\".difficulty-box__item\");\n    //   let selectedDifficultyBtn = null;\n\n    //   difficultyBtnElements.forEach((difficultyBtnEl, index) => {\n    //     difficultyBtnEl.addEventListener('click', (e) => {\n    //         setError(\"\")\n    //         if (selectedDifficultyBtn != null) {\n    //             selectedDifficultyBtn.classList.remove(\"selected\")\n    //         }\n    //         difficultyBtnEl.classList.add(\"selected\")\n    //         selectedDifficultyBtn = difficultyBtnEl;\n\n    //         game.difficulty = index + 1;\n    //         game.gameStatus = CARDS_PAGE;\n    //         game.cards = game.difficulty * 6\n\n    //         console.log(game)\n    //     })\n    //   })\n\n    //   const startBtnEl = document.getElementById(\"start-btn\")\n\n    //   startBtnEl.addEventListener(\"click\", (e) => {\n    //     if (game.difficulty == null){\n    //         setError('Выберите уровень сложности!')\n    //     } else {\n    //         goToPage(CARDS_PAGE)\n    //     }\n    //   })\n\n    const difficultyFormEl = appEl.querySelector('.difficulty-form');\n    const formErrorEl = appEl.querySelector('.form-error');\n\n    const difficultyBtnElements = document.querySelectorAll('.box__item');\n    let prevSelectedBtn = null;\n\n    difficultyBtnElements.forEach((difficultyBtnEl) => {\n        difficultyBtnEl.addEventListener('click', () => {\n            setError('');\n            if (prevSelectedBtn !== null) {\n                prevSelectedBtn.classList.remove('selected');\n            }\n            difficultyBtnEl.classList.add('selected');\n            prevSelectedBtn = difficultyBtnEl;\n        });\n    });\n\n    difficultyFormEl.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const selectedDifficultyBtn = difficultyFormEl.querySelector(\n            \"input[name='difficulty']:checked\"\n        );\n\n        if (!selectedDifficultyBtn) {\n            setError('Выберите уровень сложности!');\n            return;\n        }\n\n        const selectedDifficulty = parseInt(selectedDifficultyBtn.value);\n        game.difficulty = selectedDifficulty;\n        game.gameStatus = GAME_PAGE;\n        game.cards = generateDeck(selectedDifficulty);\n        goToPage(GAME_PAGE);\n    });\n\n    function setError(message) {\n        formErrorEl.textContent = message;\n    }\n}\n","import { DIFFICULTY_PAGE } from '../routes.js';\nimport { game } from '../script.js';\n// import { GAME_PAGE } from '../routes.js';\n// import { generateDeck } from '../helpers.js';\n\nexport function renderResultPageComponent({ appEl, goToPage }) {\n    console.log(game);\n    const appHtml = `<div class=\"main\">\n    <div class = \"box\">\n    <img\n    src=\"./static/img/win-img.png\"\n    alt=\"colorfull cone\"\n    class=\"win__img\"/>\n                        <p class=\"box__title result-box__title\">${\n                            game.isWin ? 'Вы выиграли!' : 'Вы проиграли!'\n                        }</p>\n                       \n                        <p class = \"timer__title\">Затраченное время</p>\n                           \n                            <div class=\"timer result-timer\">\n                            <div class=\"timer__block\">\n                             \n                              <span id=\"minutes\">00</span>\n                            </div>\n                            <span class=\"timer__dot\">.</span>\n                            <div class=\"timer__block\">\n                             \n                              <span id=\"seconds\">00</span>\n                            </div>\n                          </div>\n                          <button type=\"submit\" class=\"btn result-btn\" id=\"start-btn\">Старт</button>\n                        </div>\n                    </div>\n                   \n\n                </div>`;\n\n    appEl.innerHTML = appHtml;\n\n    document.getElementById('start-btn').addEventListener('click', () => {\n        goToPage(DIFFICULTY_PAGE);\n    });\n\n    // const difficultyFormEl = appEl.querySelector('.difficulty-form');\n    // const formErrorEl = appEl.querySelector('.form-error');\n\n    // const difficultyBtnElements = document.querySelectorAll(\n    //     '.difficulty-box__item'\n    // );\n    // let prevSelectedBtn = null;\n\n    // difficultyBtnElements.forEach((difficultyBtnEl) => {\n    //     difficultyBtnEl.addEventListener('click', () => {\n    //         setError('');\n    //         if (prevSelectedBtn !== null) {\n    //             prevSelectedBtn.classList.remove('selected');\n    //         }\n    //         difficultyBtnEl.classList.add('selected');\n    //         prevSelectedBtn = difficultyBtnEl;\n    //     });\n    // });\n\n    // difficultyFormEl.addEventListener('submit', (e) => {\n    //     e.preventDefault();\n    //     const selectedDifficultyBtn = difficultyFormEl.querySelector(\n    //         \"input[name='difficulty']:checked\"\n    //     );\n\n    //     if (!selectedDifficultyBtn) {\n    //         setError('Выберите уровень сложности!');\n    //         return;\n    //     }\n\n    //     const selectedDifficulty = parseInt(selectedDifficultyBtn.value);\n    //     game.difficulty = selectedDifficulty;\n    //     game.gameStatus = GAME_PAGE;\n    //     game.cards = generateDeck(selectedDifficulty);\n    //     goToPage(GAME_PAGE);\n    // });\n\n    // function setError(message) {\n    //     formErrorEl.textContent = message;\n    // }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","DIFFICULTY_PAGE","GAME_PAGE","RESULT_PAGE","compareRandom","arr","i","length","j","Math","floor","random","getSuitSymbol","suit","Hearts","Diamonds","Clubs","Spades","page","game","gameTime","difficulty","gameStatus","cards","selectedCards","isWin","goToPage","newPage","includes","renderApp","Error","appEl","document","getElementById","innerHTML","difficultyFormEl","querySelector","formErrorEl","difficultyBtnElements","querySelectorAll","prevSelectedBtn","setError","message","textContent","forEach","difficultyBtnEl","addEventListener","classList","remove","add","e","preventDefault","selectedDifficultyBtn","selectedDifficulty","parseInt","value","cardsDeck","suits","ranks","rank","push","slice","flatMap","card","generateDeck","renderDifficultyPageComponent","playCards","appHtml","map","index","console","log","join","cardElements","matchedPairs","cardEl","setTimeout","contains","element","card1","card2","selectedCard","renderGamePageComponent","renderResultPageComponent"],"sourceRoot":""}